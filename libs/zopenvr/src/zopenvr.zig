const VkInstance = anyopaque;

pub const HmdMatrix34 = extern struct {
    m: [3][4]f32,
};
pub const HmdMatrix44 = extern struct {
    m: [4][4]f32,
};

pub const EVREye = enum(i32) {
    left = 0,
    right = 1,
};
pub const HmdVector2 = extern struct {
    v: [2]f32,
};
pub const HiddenAreaMesh = extern struct {
    vertex_data: [*c]HmdVector2,
    triangle_count: u32,
};

pub const DistortionCoordinates = extern struct {
    red: [2]f32,
    green: [2]f32,
    blue: [2]f32,
};

pub const ETextureType = enum(i32) {
    invalid = -1,
    directx = 0,
    opengl = 1,
    vulkan = 2,
    iosurface = 3,
    directx12 = 4,
    dxgi_shared_handle = 5,
    metal = 6,
    reserved = 7,
};

pub const ETrackingUniverseOrigin = enum(i32) {
    seated = 0,
    standing = 1,
    raw_and_uncalibrated = 2,
};

pub const TrackedDevicePose = extern struct {
    device_to_absolute_tracking: HmdMatrix34,
    velocity: HmdVector3,
    angular_velocity: HmdVector3,
    tracking_result: ETrackingResult,
    pose_is_valid: bool,
    device_is_connected: bool,
};

pub const HmdVector3 = extern struct {
    v: [3]f32,
};

pub const ETrackingResult = enum(i32) {
    uninitialized = 1,
    calibrating_in_progress = 100,
    calibrating_out_of_range = 101,
    running_ok = 200,
    running_out_of_range = 201,
    fallback_rotation_only = 300,
};

pub const ETrackedDeviceClass = enum(i32) {
    invalid = 0,
    hmd = 1,
    controller = 2,
    generic_tracker = 3,
    tracking_reference = 4,
    display_redirect = 5,
    max = 6,
};

pub const TrackedDeviceIndex = u32;

pub const EDeviceActivityLevel = enum(i32) {
    unknown = -1,
    idle = 0,
    user_interaction = 1,
    user_interaction_timeout = 2,
    standby = 3,
    idle_timeout = 4,
};

pub const ETrackedControllerRole = enum(i32) {
    invalid = 0,
    left_hand = 1,
    right_hand = 2,
    opt_out = 3,
    treadmill = 4,
    stylus = 5,
    const max = ETrackedControllerRole.stylus;
};

pub const ETrackedDeviceProperty = enum(i32) {
    invalid = 0,
    tracking_system_name_string = 1000,
    model_number_string = 1001,
    serial_number_string = 1002,
    render_model_name_string = 1003,
    will_drift_in_yaw_bool = 1004,
    manufacturer_name_string = 1005,
    tracking_firmware_version_string = 1006,
    hardware_revision_string = 1007,
    all_wireless_dongle_descriptions_string = 1008,
    connected_wireless_dongle_string = 1009,
    device_is_wireless_bool = 1010,
    device_is_charging_bool = 1011,
    device_battery_percentage_float = 1012,
    status_display_transform_matrix34 = 1013,
    firmware_update_available_bool = 1014,
    firmware_manual_update_bool = 1015,
    firmware_manual_update_url_string = 1016,
    hardware_revision_uint64 = 1017,
    firmware_version_uint64 = 1018,
    fpga_version_uint64 = 1019,
    vrc_version_uint64 = 1020,
    radio_version_uint64 = 1021,
    dongle_version_uint64 = 1022,
    block_server_shutdown_bool = 1023,
    can_unify_coordinate_system_with_hmd_bool = 1024,
    contains_proximity_sensor_bool = 1025,
    device_provides_battery_status_bool = 1026,
    device_can_power_off_bool = 1027,
    firmware_programming_target_string = 1028,
    device_class_int32 = 1029,
    has_camera_bool = 1030,
    driver_version_string = 1031,
    firmware_force_update_required_bool = 1032,
    vive_system_button_fix_required_bool = 1033,
    parent_driver_uint64 = 1034,
    resource_root_string = 1035,
    registered_device_type_string = 1036,
    input_profile_path_string = 1037,
    never_tracked_bool = 1038,
    num_cameras_int32 = 1039,
    camera_frame_layout_int32 = 1040,
    camera_stream_format_int32 = 1041,
    additional_device_settings_path_string = 1042,
    identifiable_bool = 1043,
    bootloader_version_uint64 = 1044,
    additional_system_report_data_string = 1045,
    composite_firmware_version_string = 1046,
    firmware_remind_update_bool = 1047,
    peripheral_application_version_uint64 = 1048,
    manufacturer_serial_number_string = 1049,
    computed_serial_number_string = 1050,
    estimated_device_first_use_time_int32 = 1051,
    device_power_usage_float = 1052,
    ignore_motion_for_standby_bool = 1053,
    actual_tracking_system_name_string = 1054,
    reports_time_since_v_sync_bool = 2000,
    seconds_from_vsync_to_photons_float = 2001,
    display_frequency_float = 2002,
    user_ipd_meters_float = 2003,
    current_universe_id_uint64 = 2004,
    previous_universe_id_uint64 = 2005,
    display_firmware_version_uint64 = 2006,
    is_on_desktop_bool = 2007,
    display_mc_type_int32 = 2008,
    display_mc_offset_float = 2009,
    display_mc_scale_float = 2010,
    edid_vendor_id_int32 = 2011,
    display_mc_image_left_string = 2012,
    display_mc_image_right_string = 2013,
    display_gc_black_clamp_float = 2014,
    edid_product_id_int32 = 2015,
    camera_to_head_transform_matrix34 = 2016,
    display_gc_type_int32 = 2017,
    display_gc_offset_float = 2018,
    display_gc_scale_float = 2019,
    display_gc_prescale_float = 2020,
    display_gc_image_string = 2021,
    lens_center_left_u_float = 2022,
    lens_center_left_v_float = 2023,
    lens_center_right_u_float = 2024,
    lens_center_right_v_float = 2025,
    user_head_to_eye_depth_meters_float = 2026,
    camera_firmware_version_uint64 = 2027,
    camera_firmware_description_string = 2028,
    display_fpga_version_uint64 = 2029,
    display_bootloader_version_uint64 = 2030,
    display_hardware_version_uint64 = 2031,
    audio_firmware_version_uint64 = 2032,
    camera_compatibility_mode_int32 = 2033,
    screenshot_horizontal_field_of_view_degrees_float = 2034,
    screenshot_vertical_field_of_view_degrees_float = 2035,
    display_suppressed_bool = 2036,
    display_allow_night_mode_bool = 2037,
    display_mc_image_width_int32 = 2038,
    display_mc_image_height_int32 = 2039,
    display_mc_image_num_channels_int32 = 2040,
    display_mc_image_data_binary = 2041,
    seconds_from_photons_to_vblank_float = 2042,
    driver_direct_mode_sends_vsync_events_bool = 2043,
    display_debug_mode_bool = 2044,
    graphics_adapter_luid_uint64 = 2045,
    driver_provided_chaperone_path_string = 2048,
    expected_tracking_reference_count_int32 = 2049,
    expected_controller_count_int32 = 2050,
    named_icon_path_controller_left_device_off_string = 2051,
    named_icon_path_controller_right_device_off_string = 2052,
    named_icon_path_tracking_reference_device_off_string = 2053,
    do_not_apply_prediction_bool = 2054,
    camera_to_head_transforms_matrix34_array = 2055,
    distortion_mesh_resolution_int32 = 2056,
    driver_is_drawing_controllers_bool = 2057,
    driver_requests_application_pause_bool = 2058,
    driver_requests_reduced_rendering_bool = 2059,
    minimum_ipd_step_meters_float = 2060,
    audio_bridge_firmware_version_uint64 = 2061,
    image_bridge_firmware_version_uint64 = 2062,
    imu_to_head_transform_matrix34 = 2063,
    imu_factory_gyro_bias_vector3 = 2064,
    imu_factory_gyro_scale_vector3 = 2065,
    imu_factory_accelerometer_bias_vector3 = 2066,
    imu_factory_accelerometer_scale_vector3 = 2067,
    configuration_includes_lighthouse20_features_bool = 2069,
    additional_radio_features_uint64 = 2070,
    camera_white_balance_vector4_array = 2071,
    camera_distortion_function_int32_array = 2072,
    camera_distortion_coefficients_float_array = 2073,
    expected_controller_type_string = 2074,
    hmd_tracking_style_int32 = 2075,
    driver_provided_chaperone_visibility_bool = 2076,
    hmd_column_correction_setting_prefix_string = 2077,
    camera_supports_compatibility_modes_bool = 2078,
    supports_room_view_depth_projection_bool = 2079,
    display_available_frame_rates_float_array = 2080,
    display_supports_multiple_framerates_bool = 2081,
    display_color_mult_left_vector3 = 2082,
    display_color_mult_right_vector3 = 2083,
    display_supports_runtime_framerate_change_bool = 2084,
    display_supports_analog_gain_bool = 2085,
    display_min_analog_gain_float = 2086,
    display_max_analog_gain_float = 2087,
    camera_exposure_time_float = 2088,
    camera_global_gain_float = 2089,
    dashboard_scale_float = 2091,
    peer_button_info_string = 2092,
    hmd_supports_hdr10_bool = 2093,
    hmd_enable_parallel_render_cameras_bool = 2094,
    driver_provided_chaperone_json_string = 2095,
    force_system_layer_use_app_poses_bool = 2096,
    ipd_ui_range_min_meters_float = 2100,
    ipd_ui_range_max_meters_float = 2101,
    hmd_supports_hdcp14_legacy_compat_bool = 2102,
    hmd_supports_mic_monitoring_bool = 2103,
    hmd_supports_display_port_training_mode_bool = 2104,
    hmd_supports_room_view_direct_bool = 2105,
    hmd_supports_app_throttling_bool = 2106,
    hmd_supports_gpu_bus_monitoring_bool = 2107,
    driver_displays_ipd_changes_bool = 2108,
    driver_reserved_01 = 2109,
    dsc_version_int32 = 2110,
    dsc_slice_count_int32 = 2111,
    dscbp_px16_int32 = 2112,
    hmd_max_distorted_texture_width_int32 = 2113,
    hmd_max_distorted_texture_height_int32 = 2114,
    hmd_allow_supersample_filtering_bool = 2115,
    driver_requested_mura_correction_mode_int32 = 2200,
    driver_requested_mura_feather_inner_left_int32 = 2201,
    driver_requested_mura_feather_inner_right_int32 = 2202,
    driver_requested_mura_feather_inner_top_int32 = 2203,
    driver_requested_mura_feather_inner_bottom_int32 = 2204,
    driver_requested_mura_feather_outer_left_int32 = 2205,
    driver_requested_mura_feather_outer_right_int32 = 2206,
    driver_requested_mura_feather_outer_top_int32 = 2207,
    driver_requested_mura_feather_outer_bottom_int32 = 2208,
    audio_default_playback_device_id_string = 2300,
    audio_default_recording_device_id_string = 2301,
    audio_default_playback_device_volume_float = 2302,
    audio_supports_dual_speaker_and_jack_output_bool = 2303,
    audio_driver_manages_playback_volume_control_bool = 2304,
    audio_driver_playback_volume_float = 2305,
    audio_driver_playback_mute_bool = 2306,
    audio_driver_manages_recording_volume_control_bool = 2307,
    audio_driver_recording_volume_float = 2308,
    audio_driver_recording_mute_bool = 2309,
    attached_device_id_string = 3000,
    supported_buttons_uint64 = 3001,
    axis0_type_int32 = 3002,
    axis1_type_int32 = 3003,
    axis2_type_int32 = 3004,
    axis3_type_int32 = 3005,
    axis4_type_int32 = 3006,
    controller_role_hint_int32 = 3007,
    field_of_view_left_degrees_float = 4000,
    field_of_view_right_degrees_float = 4001,
    field_of_view_top_degrees_float = 4002,
    field_of_view_bottom_degrees_float = 4003,
    tracking_range_minimum_meters_float = 4004,
    tracking_range_maximum_meters_float = 4005,
    mode_label_string = 4006,
    can_wireless_identify_bool = 4007,
    nonce_int32 = 4008,
    icon_path_name_string = 5000,
    named_icon_path_device_off_string = 5001,
    named_icon_path_device_searching_string = 5002,
    named_icon_path_device_searching_alert_string = 5003,
    named_icon_path_device_ready_string = 5004,
    named_icon_path_device_ready_alert_string = 5005,
    named_icon_path_device_not_ready_string = 5006,
    named_icon_path_device_standby_string = 5007,
    named_icon_path_device_alert_low_string = 5008,
    named_icon_path_device_standby_alert_string = 5009,
    display_hidden_area_binary_start = 5100,
    display_hidden_area_binary_end = 5150,
    parent_container = 5151,
    override_container_uint64 = 5152,
    user_config_path_string = 6000,
    install_path_string = 6001,
    has_display_component_bool = 6002,
    has_controller_component_bool = 6003,
    has_camera_component_bool = 6004,
    has_driver_direct_mode_component_bool = 6005,
    has_virtual_display_component_bool = 6006,
    has_spatial_anchors_support_bool = 6007,
    supports_xr_texture_sets_bool = 6008,
    controller_type_string = 7000,
    controller_hand_selection_priority_int32 = 7002,
    vendor_specific_reserved_start = 10000,
    vendor_specific_reserved_end = 10999,
    tracked_device_property_max = 1000000,
};

pub const ETrackedPropertyError = enum(i32) {
    success = 0,
    wrong_data_type = 1,
    wrong_device_class = 2,
    buffer_too_small = 3,
    unknown_property = 4,
    invalid_device = 5,
    could_not_contact_server = 6,
    value_not_provided_by_device = 7,
    string_exceeds_maximum_length = 8,
    not_yet_available = 9,
    permission_denied = 10,
    invalid_operation = 11,
    cannot_write_to_wildcards = 12,
    ipc_read_failure = 13,
    out_of_memory = 14,
    invalid_container = 15,
};

pub const PropertyTypeTag = u32;

pub const VREvent = extern struct {
    event_type: u32,
    tracked_device_index: TrackedDeviceIndex,
    event_age_seconds: f32,
    data: VREventData,
};

pub const VREventReserved = extern struct {
    reserved0: u64,
    reserved1: u64,
    reserved2: u64,
    reserved3: u64,
    reserved4: u64,
    reserved5: u64,
};
pub const VREventController = extern struct {
    button: u32,
};
pub const VREventMouse = extern struct {
    x: f32,
    y: f32,
    button: u32,
    cursor_index: u32,
};
pub const struct_VREventScroll = extern struct {
    x_delta: f32,
    y_delta: f32,
    unused: u32,
    viewport_scale: f32,
    cursor_index: u32,
};
pub const VREventProcess = extern struct {
    pid: u32,
    old_pid: u32,
    forced: bool,
    connection_lost: bool,
};
pub const VREventNotification = extern struct {
    user_value: u64,
    notification_id: u32,
};
pub const VREventOverlay = extern struct {
    overlay_handle: u64,
    device_path: u64,
    memory_block_id: u64,
    cursor_index: u32,
};
pub const VREventStatus = extern struct {
    status_state: u32,
};
pub const VREventKeyboard = extern struct {
    new_input: [8]u8,
    user_value: u64,
    overlay_handle: u64,
};
pub const VREventIpd = extern struct {
    ipd_meters: f32,
};
pub const VREventChaperone = extern struct {
    previous_universe: u64,
    current_universe: u64,
};
pub const VREventPerformanceTest = extern struct {
    fidelity_level: u32,
};

pub const VREventTouchPadMove = extern struct {
    finger_down: bool,
    seconds_finger_down: f32,
    x_first: f32,
    y_first: f32,
    x_raw: f32,
    y_raw: f32,
};

pub const VREventSeatedZeroPoseReset = extern struct {
    reset_by_system_menu: bool,
};
pub const VREventScreenshot = extern struct {
    handle: u32,
    type: u32,
};
pub const VREventScreenshotProgress = extern struct {
    progress: f32,
};
pub const VREventApplicationLaunch = extern struct {
    pid: u32,
    args_handle: u32,
};

pub const VREventEditingCameraSurface = extern struct {
    overlay_handle: u64,
    visual_mode: u32,
};
pub const VREventMessageOverlay = extern struct {
    response: u32,
};
pub const PropertyContainerHandle = u64;
pub const VREventProperty = extern struct {
    container: PropertyContainerHandle,
    prop: ETrackedDeviceProperty,
};
pub const VREventHapticVibration = extern struct {
    container_handle: u64,
    component_handle: u64,
    duration_seconds: f32,
    frequency: f32,
    amplitude: f32,
};
pub const WebConsoleHandle = u64;
pub const VREventWebConsole = extern struct {
    web_console_handle: WebConsoleHandle,
};
pub const VREventInputBindingLoad = extern struct {
    app_container: PropertyContainerHandle,
    path_message: u64,
    path_url: u64,
    path_controller_type: u64,
};
pub const VREventInputActionManifestLoad = extern struct {
    path_app_key: u64,
    path_message: u64,
    path_message_param: u64,
    path_manifest_path: u64,
};
pub const SpatialAnchorHandle = u32;
pub const VREventSpatialAnchor = extern struct {
    handle: SpatialAnchorHandle,
};
pub const VREventProgressUpdate = extern struct {
    application_property_container: u64,
    path_device: u64,
    path_input_source: u64,
    path_progress_action: u64,
    path_icon: u64,
    progress: f32,
};
pub const EShowUIType = enum(i32) {
    controller_binding = 0,
    manage_trackers = 1,
    pairing = 3,
    settings = 4,
    debug_commands = 5,
    full_controller_binding = 6,
    manage_drivers = 7,
};
pub const VREventShowUI = extern struct {
    type: EShowUIType,
};

pub const VREventShowDevTools = extern struct {
    browser_identifier: i32,
};
pub const EHDCPError = enum(i32) {
    none = 0,
    link_lost = 1,
    tampered = 2,
    device_revoked = 3,
    unknown = 4,
};
pub const VREventHDCPError = extern struct {
    code: EHDCPError,
};
pub const VREventAudioVolumeControl = extern struct {
    volume_level: f32,
};
pub const VREventAudioMuteControl = extern struct {
    mute: bool,
};
pub const VREventData = extern union {
    reserved: VREventReserved,
    controller: VREventController,
    mouse: VREventMouse,
    scroll: struct_VREventScroll,
    process: VREventProcess,
    notification: VREventNotification,
    overlay: VREventOverlay,
    status: VREventStatus,
    keyboard: VREventKeyboard,
    ipd: VREventIpd,
    chaperone: VREventChaperone,
    performance_test: VREventPerformanceTest,
    touch_pad_move: VREventTouchPadMove,
    seated_zero_pose_reset: VREventSeatedZeroPoseReset,
    screenshot: VREventScreenshot,
    screenshot_progress: VREventScreenshotProgress,
    application_launch: VREventApplicationLaunch,
    camera_surface: VREventEditingCameraSurface,
    message_overlay: VREventMessageOverlay,
    property: VREventProperty,
    haptic_vibration: VREventHapticVibration,
    web_console: VREventWebConsole,
    input_binding: VREventInputBindingLoad,
    action_manifest: VREventInputActionManifestLoad,
    spatial_anchor: VREventSpatialAnchor,
    progress_update: VREventProgressUpdate,
    show_ui: VREventShowUI,
    show_dev_tools: VREventShowDevTools,
    hdcp_error: VREventHDCPError,
    audio_volume_control: VREventAudioVolumeControl,
    audio_mute_control: VREventAudioMuteControl,
};
pub const EHiddenAreaMeshType = enum(i32) {
    standard = 0,
    inverse = 1,
    line_loop = 2,
    max = 3,
};
pub const VRControllerAxis = extern struct {
    x: f32,
    y: f32,
};
pub const VRControllerState = extern struct {
    packet_num: u32,
    button_pressed: u64,
    button_touched: u64,
    r_axis: [5]VRControllerAxis,
};
pub const EVRButtonId = enum(i32) {
    system = 0,
    application_menu = 1,
    grip = 2,
    d_pad_left = 3,
    d_pad_up = 4,
    d_pad_right = 5,
    d_pad_down = 6,
    a = 7,
    proximity_sensor = 31,
    axis0 = 32,
    axis1 = 33,
    axis2 = 34,
    axis3 = 35,
    axis4 = 36,
    reserved0 = 50,
    reserved1 = 51,
    max = 64,

    const steam_vr_touchpad = EVRButtonId.axis0;
    const steam_vr_trigger = EVRButtonId.axis1;
    const dashboard_back = EVRButtonId.grip;
    const index_controller_a = EVRButtonId.grip;
    const index_controller_b = EVRButtonId.application_menu;
    const index_controller_joy_stick = EVRButtonId.axis3;
};
pub const EVRControllerAxisType = enum(i32) {
    none = 0,
    track_pad = 1,
    joystick = 2,
    trigger = 3,
};
pub const EVRFirmwareError = enum(i32) {
    none = 0,
    success = 1,
    fail = 2,
};
pub const EVREventType = enum(i32) {
    none = 0,
    tracked_device_activated = 100,
    tracked_device_deactivated = 101,
    tracked_device_updated = 102,
    tracked_device_user_interaction_started = 103,
    tracked_device_user_interaction_ended = 104,
    ipd_changed = 105,
    enter_standby_mode = 106,
    leave_standby_mode = 107,
    tracked_device_role_changed = 108,
    watchdog_wake_up_requested = 109,
    lens_distortion_changed = 110,
    property_changed = 111,
    wireless_disconnect = 112,
    wireless_reconnect = 113,
    reserved_01 = 114,
    reserved_02 = 115,
    button_press = 200,
    button_unpress = 201,
    button_touch = 202,
    button_untouch = 203,
    modal_cancel = 257,
    mouse_move = 300,
    mouse_button_down = 301,
    mouse_button_up = 302,
    focus_enter = 303,
    focus_leave = 304,
    scroll_discrete = 305,
    touch_pad_move = 306,
    overlay_focus_changed = 307,
    reload_overlays = 308,
    scroll_smooth = 309,
    lock_mouse_position = 310,
    unlock_mouse_position = 311,
    input_focus_captured = 400,
    input_focus_released = 401,
    scene_application_changed = 404,
    input_focus_changed = 406,
    scene_application_using_wrong_graphics_adapter = 408,
    action_binding_reloaded = 409,
    hide_render_models = 410,
    show_render_models = 411,
    scene_application_state_changed = 412,
    scene_app_pipe_disconnected = 413,
    console_opened = 420,
    console_closed = 421,
    overlay_shown = 500,
    overlay_hidden = 501,
    dashboard_activated = 502,
    dashboard_deactivated = 503,
    dashboard_requested = 505,
    reset_dashboard = 506,
    image_loaded = 508,
    show_keyboard = 509,
    hide_keyboard = 510,
    overlay_gamepad_focus_gained = 511,
    overlay_gamepad_focus_lost = 512,
    overlay_shared_texture_changed = 513,
    screenshot_triggered = 516,
    image_failed = 517,
    dashboard_overlay_created = 518,
    switch_gamepad_focus = 519,
    request_screenshot = 520,
    screenshot_taken = 521,
    screenshot_failed = 522,
    submit_screenshot_to_dashboard = 523,
    screenshot_progress_to_dashboard = 524,
    primary_dashboard_device_changed = 525,
    room_view_shown = 526,
    room_view_hidden = 527,
    show_ui = 528,
    show_dev_tools = 529,
    desktop_view_updating = 530,
    desktop_view_ready = 531,
    start_dashboard = 532,
    elevate_prism = 533,
    overlay_closed = 534,
    dashboard_thumb_changed = 535,
    desktop_might_be_visible = 536,
    desktop_might_be_hidden = 537,
    notification_shown = 600,
    notification_hidden = 601,
    notification_begin_interaction = 602,
    notification_destroyed = 603,
    quit = 700,
    process_quit = 701,
    quit_acknowledged = 703,
    driver_requested_quit = 704,
    restart_requested = 705,
    invalidate_swap_texture_sets = 706,
    chaperone_data_has_changed = 800,
    chaperone_universe_has_changed = 801,
    chaperone_temp_data_has_changed = 802,
    chaperone_settings_have_changed = 803,
    seated_zero_pose_reset = 804,
    chaperone_flush_cache = 805,
    chaperone_room_setup_starting = 806,
    chaperone_room_setup_finished = 807,
    standing_zero_pose_reset = 808,
    audio_settings_have_changed = 820,
    background_setting_has_changed = 850,
    camera_settings_have_changed = 851,
    reprojection_setting_has_changed = 852,
    model_skin_settings_have_changed = 853,
    environment_settings_have_changed = 854,
    power_settings_have_changed = 855,
    enable_home_app_settings_have_changed = 856,
    steam_vr_section_setting_changed = 857,
    lighthouse_section_setting_changed = 858,
    null_section_setting_changed = 859,
    user_interface_section_setting_changed = 860,
    notifications_section_setting_changed = 861,
    keyboard_section_setting_changed = 862,
    perf_section_setting_changed = 863,
    dashboard_section_setting_changed = 864,
    web_interface_section_setting_changed = 865,
    trackers_section_setting_changed = 866,
    last_known_section_setting_changed = 867,
    dismissed_warnings_section_setting_changed = 868,
    gpu_speed_section_setting_changed = 869,
    windows_mr_section_setting_changed = 870,
    other_section_setting_changed = 871,
    any_driver_settings_changed = 872,
    status_update = 900,
    web_interface_install_driver_completed = 950,
    mc_image_updated = 1000,
    firmware_update_started = 1100,
    firmware_update_finished = 1101,
    keyboard_closed = 1200,
    keyboard_char_input = 1201,
    keyboard_done = 1202,
    keyboard_opened_global = 1203,
    keyboard_closed_global = 1204,
    application_list_updated = 1303,
    application_mime_type_load = 1304,
    process_connected = 1306,
    process_disconnected = 1307,
    compositor_chaperone_bounds_shown = 1410,
    compositor_chaperone_bounds_hidden = 1411,
    compositor_display_disconnected = 1412,
    compositor_display_reconnected = 1413,
    compositor_hdcp_error = 1414,
    compositor_application_not_responding = 1415,
    compositor_application_resumed = 1416,
    compositor_out_of_video_memory = 1417,
    compositor_display_mode_not_supported = 1418,
    compositor_stage_override_ready = 1419,
    compositor_request_disconnect_reconnect = 1420,
    tracked_camera_start_video_stream = 1500,
    tracked_camera_stop_video_stream = 1501,
    tracked_camera_pause_video_stream = 1502,
    tracked_camera_resume_video_stream = 1503,
    tracked_camera_editing_surface = 1550,
    performance_test_enable_capture = 1600,
    performance_test_disable_capture = 1601,
    performance_test_fidelity_level = 1602,
    message_overlay_closed = 1650,
    message_overlay_close_requested = 1651,
    input_haptic_vibration = 1700,
    input_binding_load_failed = 1701,
    input_binding_load_successful = 1702,
    input_action_manifest_reloaded = 1703,
    input_action_manifest_load_failed = 1704,
    input_progress_update = 1705,
    input_tracker_activated = 1706,
    input_bindings_updated = 1707,
    input_binding_subscription_changed = 1708,
    spatial_anchors_pose_updated = 1800,
    spatial_anchors_descriptor_updated = 1801,
    spatial_anchors_request_pose_update = 1802,
    spatial_anchors_request_descriptor_update = 1803,
    system_report_started = 1900,
    monitor_show_headset_view = 2000,
    monitor_hide_headset_view = 2001,
    audio_set_speakers_volume = 2100,
    audio_set_speakers_mute = 2101,
    audio_set_microphone_volume = 2102,
    audio_set_microphone_mute = 2103,
    vendor_specific_reserved_start = 10000,
    vendor_specific_reserved_end = 19999,
};
const System = extern struct {
    GetRecommendedRenderTargetSize: *const fn ([*c]u32, [*c]u32) callconv(.C) void,
    GetProjectionMatrix: *const fn (EVREye, f32, f32) callconv(.C) HmdMatrix44,
    GetProjectionRaw: *const fn (EVREye, [*c]f32, [*c]f32, [*c]f32, [*c]f32) callconv(.C) void,
    ComputeDistortion: *const fn (EVREye, f32, f32, [*c]DistortionCoordinates) callconv(.C) bool,
    GetEyeToHeadTransform: *const fn (EVREye) callconv(.C) HmdMatrix34,
    GetTimeSinceLastVsync: *const fn ([*c]f32, [*c]u64) callconv(.C) bool,
    GetD3D9AdapterIndex: *const fn () callconv(.C) i32,
    GetDXGIOutputInfo: *const fn ([*c]i32) callconv(.C) void,
    GetOutputDevice: *const fn ([*c]u64, ETextureType, ?*VkInstance) callconv(.C) void,
    IsDisplayOnDesktop: *const fn () callconv(.C) bool,
    SetDisplayVisibility: *const fn (bool) callconv(.C) bool,
    GetDeviceToAbsoluteTrackingPose: *const fn (ETrackingUniverseOrigin, f32, [*c]TrackedDevicePose, u32) callconv(.C) void,
    GetSeatedZeroPoseToStandingAbsoluteTrackingPose: *const fn () callconv(.C) HmdMatrix34,
    GetRawZeroPoseToStandingAbsoluteTrackingPose: *const fn () callconv(.C) HmdMatrix34,
    GetSortedTrackedDeviceIndicesOfClass: *const fn (ETrackedDeviceClass, [*c]TrackedDeviceIndex, u32, TrackedDeviceIndex) callconv(.C) u32,
    GetTrackedDeviceActivityLevel: *const fn (TrackedDeviceIndex) callconv(.C) EDeviceActivityLevel,
    ApplyTransform: *const fn ([*c]TrackedDevicePose, [*c]TrackedDevicePose, [*c]HmdMatrix34) callconv(.C) void,
    GetTrackedDeviceIndexForControllerRole: *const fn (ETrackedControllerRole) callconv(.C) TrackedDeviceIndex,
    GetControllerRoleForTrackedDeviceIndex: *const fn (TrackedDeviceIndex) callconv(.C) ETrackedControllerRole,
    GetTrackedDeviceClass: *const fn (TrackedDeviceIndex) callconv(.C) ETrackedDeviceClass,
    IsTrackedDeviceConnected: *const fn (TrackedDeviceIndex) callconv(.C) bool,
    GetBoolTrackedDeviceProperty: *const fn (TrackedDeviceIndex, ETrackedDeviceProperty, [*c]ETrackedPropertyError) callconv(.C) bool,
    GetFloatTrackedDeviceProperty: *const fn (TrackedDeviceIndex, ETrackedDeviceProperty, [*c]ETrackedPropertyError) callconv(.C) f32,
    GetInt32TrackedDeviceProperty: *const fn (TrackedDeviceIndex, ETrackedDeviceProperty, [*c]ETrackedPropertyError) callconv(.C) i32,
    GetUint64TrackedDeviceProperty: *const fn (TrackedDeviceIndex, ETrackedDeviceProperty, [*c]ETrackedPropertyError) callconv(.C) u64,
    GetMatrix34TrackedDeviceProperty: *const fn (TrackedDeviceIndex, ETrackedDeviceProperty, [*c]ETrackedPropertyError) callconv(.C) HmdMatrix34,
    GetArrayTrackedDeviceProperty: *const fn (TrackedDeviceIndex, ETrackedDeviceProperty, PropertyTypeTag, ?*anyopaque, u32, [*c]ETrackedPropertyError) callconv(.C) u32,
    GetStringTrackedDeviceProperty: *const fn (TrackedDeviceIndex, ETrackedDeviceProperty, [*c]u8, u32, [*c]ETrackedPropertyError) callconv(.C) u32,
    GetPropErrorNameFromEnum: *const fn (ETrackedPropertyError) callconv(.C) [*c]u8,
    PollNextEvent: *const fn ([*c]VREvent, u32) callconv(.C) bool,
    PollNextEventWithPose: *const fn (ETrackingUniverseOrigin, [*c]VREvent, u32, [*c]TrackedDevicePose) callconv(.C) bool,
    GetEventTypeNameFromEnum: *const fn (EVREventType) callconv(.C) [*c]u8,
    GetHiddenAreaMesh: *const fn (EVREye, EHiddenAreaMeshType) callconv(.C) HiddenAreaMesh,
    GetControllerState: *const fn (TrackedDeviceIndex, [*c]VRControllerState, u32) callconv(.C) bool,
    GetControllerStateWithPose: *const fn (ETrackingUniverseOrigin, TrackedDeviceIndex, [*c]VRControllerState, u32, [*c]TrackedDevicePose) callconv(.C) bool,
    TriggerHapticPulse: *const fn (TrackedDeviceIndex, u32, c_ushort) callconv(.C) void,
    GetButtonIdNameFromEnum: *const fn (EVRButtonId) callconv(.C) [*c]u8,
    GetControllerAxisTypeNameFromEnum: *const fn (EVRControllerAxisType) callconv(.C) [*c]u8,
    IsInputAvailable: *const fn () callconv(.C) bool,
    IsSteamVRDrawingControllers: *const fn () callconv(.C) bool,
    ShouldApplicationPause: *const fn () callconv(.C) bool,
    ShouldApplicationReduceRenderingWork: *const fn () callconv(.C) bool,
    PerformFirmwareUpdate: *const fn (TrackedDeviceIndex) callconv(.C) EVRFirmwareError,
    AcknowledgeQuit_Exiting: *const fn () callconv(.C) void,
    GetAppContainerFilePaths: *const fn ([*c]u8, u32) callconv(.C) u32,
    GetRuntimeVersion: *const fn () callconv(.C) [*c]u8,

    pub fn getRuntimeVersion(system: System) [:0]const u8 {
        return std.mem.span(system.GetRuntimeVersion());
    }
};

const SystemVersion: [*c]const u8 = "IVRSystem_022";
const SystemInterfaceName: [*c]const u8 = "FnTable:IVRSystem_022";

pub fn init(application_type: ApplicationType) InitError!*System {
    var init_error: EVRInitError = .None;
    _ = VR_InitInternal(&init_error, application_type);
    try init_error.maybe();
    const system: *System = @ptrCast(VR_GetGenericInterface(SystemInterfaceName, &init_error));
    try init_error.maybe();
    return system;
}

const InitError = error{
    None,
    Unknown,
    Init_InstallationNotFound,
    Init_InstallationCorrupt,
    Init_VRClientDLLNotFound,
    Init_FileNotFound,
    Init_FactoryNotFound,
    Init_InterfaceNotFound,
    Init_InvalidInterface,
    Init_UserConfigDirectoryInvalid,
    Init_HmdNotFound,
    Init_NotInitialized,
    Init_PathRegistryNotFound,
    Init_NoConfigPath,
    Init_NoLogPath,
    Init_PathRegistryNotWritable,
    Init_AppInfoInitFailed,
    Init_Retry,
    Init_InitCanceledByUser,
    Init_AnotherAppLaunching,
    Init_SettingsInitFailed,
    Init_ShuttingDown,
    Init_TooManyObjects,
    Init_NoServerForBackgroundApp,
    Init_NotSupportedWithCompositor,
    Init_NotAvailableToUtilityApps,
    Init_Internal,
    Init_HmdDriverIdIsNone,
    Init_HmdNotFoundPresenceFailed,
    Init_VRMonitorNotFound,
    Init_VRMonitorStartupFailed,
    Init_LowPowerWatchdogNotSupported,
    Init_InvalidApplicationType,
    Init_NotAvailableToWatchdogApps,
    Init_WatchdogDisabledInSettings,
    Init_VRDashboardNotFound,
    Init_VRDashboardStartupFailed,
    Init_VRHomeNotFound,
    Init_VRHomeStartupFailed,
    Init_RebootingBusy,
    Init_FirmwareUpdateBusy,
    Init_FirmwareRecoveryBusy,
    Init_USBServiceBusy,
    Init_VRWebHelperStartupFailed,
    Init_TrackerManagerInitFailed,
    Init_AlreadyRunning,
    Init_FailedForVrMonitor,
    Init_PropertyManagerInitFailed,
    Init_WebServerFailed,
    Init_IllegalTypeTransition,
    Init_MismatchedRuntimes,
    Init_InvalidProcessId,
    Init_VRServiceStartupFailed,
    Init_PrismNeedsNewDrivers,
    Init_PrismStartupTimedOut,
    Init_CouldNotStartPrism,
    Init_PrismClientInitFailed,
    Init_PrismClientStartFailed,
    Init_PrismExitedUnexpectedly,
    Init_BadLuid,
    Init_NoServerForAppContainer,
    Init_DuplicateBootstrapper,
    Init_VRDashboardServicePending,
    Init_VRDashboardServiceTimeout,
    Init_VRDashboardServiceStopped,
    Init_VRDashboardAlreadyStarted,
    Init_VRDashboardCopyFailed,
    Init_VRDashboardTokenFailure,
    Init_VRDashboardEnvironmentFailure,
    Init_VRDashboardPathFailure,
    Driver_Failed,
    Driver_Unknown,
    Driver_HmdUnknown,
    Driver_NotLoaded,
    Driver_RuntimeOutOfDate,
    Driver_HmdInUse,
    Driver_NotCalibrated,
    Driver_CalibrationInvalid,
    Driver_HmdDisplayNotFound,
    Driver_TrackedDeviceInterfaceUnknown,
    Driver_HmdDriverIdOutOfBounds,
    Driver_HmdDisplayMirrored,
    Driver_HmdDisplayNotFoundLaptop,
    Driver_PeerDriverNotInstalled,
    Driver_WirelessHmdNotConnected,
    IPC_ServerInitFailed,
    IPC_ConnectFailed,
    IPC_SharedStateInitFailed,
    IPC_CompositorInitFailed,
    IPC_MutexInitFailed,
    IPC_Failed,
    IPC_CompositorConnectFailed,
    IPC_CompositorInvalidConnectResponse,
    IPC_ConnectFailedAfterMultipleAttempts,
    IPC_ConnectFailedAfterTargetExited,
    IPC_NamespaceUnavailable,
    Compositor_Failed,
    Compositor_D3D11HardwareRequired,
    Compositor_FirmwareRequiresUpdate,
    Compositor_OverlayInitFailed,
    Compositor_ScreenshotsInitFailed,
    Compositor_UnableToCreateDevice,
    Compositor_SharedStateIsNull,
    Compositor_NotificationManagerIsNull,
    Compositor_ResourceManagerClientIsNull,
    Compositor_MessageOverlaySharedStateInitFailure,
    Compositor_PropertiesInterfaceIsNull,
    Compositor_CreateFullscreenWindowFailed,
    Compositor_SettingsInterfaceIsNull,
    Compositor_FailedToShowWindow,
    Compositor_DistortInterfaceIsNull,
    Compositor_DisplayFrequencyFailure,
    Compositor_RendererInitializationFailed,
    Compositor_DXGIFactoryInterfaceIsNull,
    Compositor_DXGIFactoryCreateFailed,
    Compositor_DXGIFactoryQueryFailed,
    Compositor_InvalidAdapterDesktop,
    Compositor_InvalidHmdAttachment,
    Compositor_InvalidOutputDesktop,
    Compositor_InvalidDeviceProvided,
    Compositor_D3D11RendererInitializationFailed,
    Compositor_FailedToFindDisplayMode,
    Compositor_FailedToCreateSwapChain,
    Compositor_FailedToGetBackBuffer,
    Compositor_FailedToCreateRenderTarget,
    Compositor_FailedToCreateDXGI2SwapChain,
    Compositor_FailedtoGetDXGI2BackBuffer,
    Compositor_FailedToCreateDXGI2RenderTarget,
    Compositor_FailedToGetDXGIDeviceInterface,
    Compositor_SelectDisplayMode,
    Compositor_FailedToCreateNvAPIRenderTargets,
    Compositor_NvAPISetDisplayMode,
    Compositor_FailedToCreateDirectModeDisplay,
    Compositor_InvalidHmdPropertyContainer,
    Compositor_UpdateDisplayFrequency,
    Compositor_CreateRasterizerState,
    Compositor_CreateWireframeRasterizerState,
    Compositor_CreateSamplerState,
    Compositor_CreateClampToBorderSamplerState,
    Compositor_CreateAnisoSamplerState,
    Compositor_CreateOverlaySamplerState,
    Compositor_CreatePanoramaSamplerState,
    Compositor_CreateFontSamplerState,
    Compositor_CreateNoBlendState,
    Compositor_CreateBlendState,
    Compositor_CreateAlphaBlendState,
    Compositor_CreateBlendStateMaskR,
    Compositor_CreateBlendStateMaskG,
    Compositor_CreateBlendStateMaskB,
    Compositor_CreateDepthStencilState,
    Compositor_CreateDepthStencilStateNoWrite,
    Compositor_CreateDepthStencilStateNoDepth,
    Compositor_CreateFlushTexture,
    Compositor_CreateDistortionSurfaces,
    Compositor_CreateConstantBuffer,
    Compositor_CreateHmdPoseConstantBuffer,
    Compositor_CreateHmdPoseStagingConstantBuffer,
    Compositor_CreateSharedFrameInfoConstantBuffer,
    Compositor_CreateOverlayConstantBuffer,
    Compositor_CreateSceneTextureIndexConstantBuffer,
    Compositor_CreateReadableSceneTextureIndexConstantBuffer,
    Compositor_CreateLayerGraphicsTextureIndexConstantBuffer,
    Compositor_CreateLayerComputeTextureIndexConstantBuffer,
    Compositor_CreateLayerComputeSceneTextureIndexConstantBuffer,
    Compositor_CreateComputeHmdPoseConstantBuffer,
    Compositor_CreateGeomConstantBuffer,
    Compositor_CreatePanelMaskConstantBuffer,
    Compositor_CreatePixelSimUBO,
    Compositor_CreateMSAARenderTextures,
    Compositor_CreateResolveRenderTextures,
    Compositor_CreateComputeResolveRenderTextures,
    Compositor_CreateDriverDirectModeResolveTextures,
    Compositor_OpenDriverDirectModeResolveTextures,
    Compositor_CreateFallbackSyncTexture,
    Compositor_ShareFallbackSyncTexture,
    Compositor_CreateOverlayIndexBuffer,
    Compositor_CreateOverlayVertexBuffer,
    Compositor_CreateTextVertexBuffer,
    Compositor_CreateTextIndexBuffer,
    Compositor_CreateMirrorTextures,
    Compositor_CreateLastFrameRenderTexture,
    Compositor_CreateMirrorOverlay,
    Compositor_FailedToCreateVirtualDisplayBackbuffer,
    Compositor_DisplayModeNotSupported,
    Compositor_CreateOverlayInvalidCall,
    Compositor_CreateOverlayAlreadyInitialized,
    Compositor_FailedToCreateMailbox,
    Compositor_WindowInterfaceIsNull,
    Compositor_SystemLayerCreateInstance,
    Compositor_SystemLayerCreateSession,
    Compositor_CreateInverseDistortUVs,
    Compositor_CreateBackbufferDepth,
    Compositor_CannotDRMLeaseDisplay,
    Compositor_CannotConnectToDisplayServer,
    Compositor_GnomeNoDRMLeasing,
    Compositor_FailedToInitializeEncoder,
    Compositor_CreateBlurTexture,
    VendorSpecific_UnableToConnectToOculusRuntime,
    VendorSpecific_WindowsNotInDevMode,
    VendorSpecific_OculusLinkNotEnabled,
    VendorSpecific_HmdFound_CantOpenDevice,
    VendorSpecific_HmdFound_UnableToRequestConfigStart,
    VendorSpecific_HmdFound_NoStoredConfig,
    VendorSpecific_HmdFound_ConfigTooBig,
    VendorSpecific_HmdFound_ConfigTooSmall,
    VendorSpecific_HmdFound_UnableToInitZLib,
    VendorSpecific_HmdFound_CantReadFirmwareVersion,
    VendorSpecific_HmdFound_UnableToSendUserDataStart,
    VendorSpecific_HmdFound_UnableToGetUserDataStart,
    VendorSpecific_HmdFound_UnableToGetUserDataNext,
    VendorSpecific_HmdFound_UserDataAddressRange,
    VendorSpecific_HmdFound_UserDataError,
    VendorSpecific_HmdFound_ConfigFailedSanityCheck,
    VendorSpecific_OculusRuntimeBadInstall,
    VendorSpecific_HmdFound_UnexpectedConfiguration_1,
    Steam_SteamInstallationNotFound,
    LastError,
};

pub const EVRInitError = enum(i32) {
    None = 0,
    Unknown = 1,
    Init_InstallationNotFound = 100,
    Init_InstallationCorrupt = 101,
    Init_VRClientDLLNotFound = 102,
    Init_FileNotFound = 103,
    Init_FactoryNotFound = 104,
    Init_InterfaceNotFound = 105,
    Init_InvalidInterface = 106,
    Init_UserConfigDirectoryInvalid = 107,
    Init_HmdNotFound = 108,
    Init_NotInitialized = 109,
    Init_PathRegistryNotFound = 110,
    Init_NoConfigPath = 111,
    Init_NoLogPath = 112,
    Init_PathRegistryNotWritable = 113,
    Init_AppInfoInitFailed = 114,
    Init_Retry = 115,
    Init_InitCanceledByUser = 116,
    Init_AnotherAppLaunching = 117,
    Init_SettingsInitFailed = 118,
    Init_ShuttingDown = 119,
    Init_TooManyObjects = 120,
    Init_NoServerForBackgroundApp = 121,
    Init_NotSupportedWithCompositor = 122,
    Init_NotAvailableToUtilityApps = 123,
    Init_Internal = 124,
    Init_HmdDriverIdIsNone = 125,
    Init_HmdNotFoundPresenceFailed = 126,
    Init_VRMonitorNotFound = 127,
    Init_VRMonitorStartupFailed = 128,
    Init_LowPowerWatchdogNotSupported = 129,
    Init_InvalidApplicationType = 130,
    Init_NotAvailableToWatchdogApps = 131,
    Init_WatchdogDisabledInSettings = 132,
    Init_VRDashboardNotFound = 133,
    Init_VRDashboardStartupFailed = 134,
    Init_VRHomeNotFound = 135,
    Init_VRHomeStartupFailed = 136,
    Init_RebootingBusy = 137,
    Init_FirmwareUpdateBusy = 138,
    Init_FirmwareRecoveryBusy = 139,
    Init_USBServiceBusy = 140,
    Init_VRWebHelperStartupFailed = 141,
    Init_TrackerManagerInitFailed = 142,
    Init_AlreadyRunning = 143,
    Init_FailedForVrMonitor = 144,
    Init_PropertyManagerInitFailed = 145,
    Init_WebServerFailed = 146,
    Init_IllegalTypeTransition = 147,
    Init_MismatchedRuntimes = 148,
    Init_InvalidProcessId = 149,
    Init_VRServiceStartupFailed = 150,
    Init_PrismNeedsNewDrivers = 151,
    Init_PrismStartupTimedOut = 152,
    Init_CouldNotStartPrism = 153,
    Init_PrismClientInitFailed = 154,
    Init_PrismClientStartFailed = 155,
    Init_PrismExitedUnexpectedly = 156,
    Init_BadLuid = 157,
    Init_NoServerForAppContainer = 158,
    Init_DuplicateBootstrapper = 159,
    Init_VRDashboardServicePending = 160,
    Init_VRDashboardServiceTimeout = 161,
    Init_VRDashboardServiceStopped = 162,
    Init_VRDashboardAlreadyStarted = 163,
    Init_VRDashboardCopyFailed = 164,
    Init_VRDashboardTokenFailure = 165,
    Init_VRDashboardEnvironmentFailure = 166,
    Init_VRDashboardPathFailure = 167,
    Driver_Failed = 200,
    Driver_Unknown = 201,
    Driver_HmdUnknown = 202,
    Driver_NotLoaded = 203,
    Driver_RuntimeOutOfDate = 204,
    Driver_HmdInUse = 205,
    Driver_NotCalibrated = 206,
    Driver_CalibrationInvalid = 207,
    Driver_HmdDisplayNotFound = 208,
    Driver_TrackedDeviceInterfaceUnknown = 209,
    Driver_HmdDriverIdOutOfBounds = 211,
    Driver_HmdDisplayMirrored = 212,
    Driver_HmdDisplayNotFoundLaptop = 213,
    Driver_PeerDriverNotInstalled = 214,
    Driver_WirelessHmdNotConnected = 215,
    IPC_ServerInitFailed = 300,
    IPC_ConnectFailed = 301,
    IPC_SharedStateInitFailed = 302,
    IPC_CompositorInitFailed = 303,
    IPC_MutexInitFailed = 304,
    IPC_Failed = 305,
    IPC_CompositorConnectFailed = 306,
    IPC_CompositorInvalidConnectResponse = 307,
    IPC_ConnectFailedAfterMultipleAttempts = 308,
    IPC_ConnectFailedAfterTargetExited = 309,
    IPC_NamespaceUnavailable = 310,
    Compositor_Failed = 400,
    Compositor_D3D11HardwareRequired = 401,
    Compositor_FirmwareRequiresUpdate = 402,
    Compositor_OverlayInitFailed = 403,
    Compositor_ScreenshotsInitFailed = 404,
    Compositor_UnableToCreateDevice = 405,
    Compositor_SharedStateIsNull = 406,
    Compositor_NotificationManagerIsNull = 407,
    Compositor_ResourceManagerClientIsNull = 408,
    Compositor_MessageOverlaySharedStateInitFailure = 409,
    Compositor_PropertiesInterfaceIsNull = 410,
    Compositor_CreateFullscreenWindowFailed = 411,
    Compositor_SettingsInterfaceIsNull = 412,
    Compositor_FailedToShowWindow = 413,
    Compositor_DistortInterfaceIsNull = 414,
    Compositor_DisplayFrequencyFailure = 415,
    Compositor_RendererInitializationFailed = 416,
    Compositor_DXGIFactoryInterfaceIsNull = 417,
    Compositor_DXGIFactoryCreateFailed = 418,
    Compositor_DXGIFactoryQueryFailed = 419,
    Compositor_InvalidAdapterDesktop = 420,
    Compositor_InvalidHmdAttachment = 421,
    Compositor_InvalidOutputDesktop = 422,
    Compositor_InvalidDeviceProvided = 423,
    Compositor_D3D11RendererInitializationFailed = 424,
    Compositor_FailedToFindDisplayMode = 425,
    Compositor_FailedToCreateSwapChain = 426,
    Compositor_FailedToGetBackBuffer = 427,
    Compositor_FailedToCreateRenderTarget = 428,
    Compositor_FailedToCreateDXGI2SwapChain = 429,
    Compositor_FailedtoGetDXGI2BackBuffer = 430,
    Compositor_FailedToCreateDXGI2RenderTarget = 431,
    Compositor_FailedToGetDXGIDeviceInterface = 432,
    Compositor_SelectDisplayMode = 433,
    Compositor_FailedToCreateNvAPIRenderTargets = 434,
    Compositor_NvAPISetDisplayMode = 435,
    Compositor_FailedToCreateDirectModeDisplay = 436,
    Compositor_InvalidHmdPropertyContainer = 437,
    Compositor_UpdateDisplayFrequency = 438,
    Compositor_CreateRasterizerState = 439,
    Compositor_CreateWireframeRasterizerState = 440,
    Compositor_CreateSamplerState = 441,
    Compositor_CreateClampToBorderSamplerState = 442,
    Compositor_CreateAnisoSamplerState = 443,
    Compositor_CreateOverlaySamplerState = 444,
    Compositor_CreatePanoramaSamplerState = 445,
    Compositor_CreateFontSamplerState = 446,
    Compositor_CreateNoBlendState = 447,
    Compositor_CreateBlendState = 448,
    Compositor_CreateAlphaBlendState = 449,
    Compositor_CreateBlendStateMaskR = 450,
    Compositor_CreateBlendStateMaskG = 451,
    Compositor_CreateBlendStateMaskB = 452,
    Compositor_CreateDepthStencilState = 453,
    Compositor_CreateDepthStencilStateNoWrite = 454,
    Compositor_CreateDepthStencilStateNoDepth = 455,
    Compositor_CreateFlushTexture = 456,
    Compositor_CreateDistortionSurfaces = 457,
    Compositor_CreateConstantBuffer = 458,
    Compositor_CreateHmdPoseConstantBuffer = 459,
    Compositor_CreateHmdPoseStagingConstantBuffer = 460,
    Compositor_CreateSharedFrameInfoConstantBuffer = 461,
    Compositor_CreateOverlayConstantBuffer = 462,
    Compositor_CreateSceneTextureIndexConstantBuffer = 463,
    Compositor_CreateReadableSceneTextureIndexConstantBuffer = 464,
    Compositor_CreateLayerGraphicsTextureIndexConstantBuffer = 465,
    Compositor_CreateLayerComputeTextureIndexConstantBuffer = 466,
    Compositor_CreateLayerComputeSceneTextureIndexConstantBuffer = 467,
    Compositor_CreateComputeHmdPoseConstantBuffer = 468,
    Compositor_CreateGeomConstantBuffer = 469,
    Compositor_CreatePanelMaskConstantBuffer = 470,
    Compositor_CreatePixelSimUBO = 471,
    Compositor_CreateMSAARenderTextures = 472,
    Compositor_CreateResolveRenderTextures = 473,
    Compositor_CreateComputeResolveRenderTextures = 474,
    Compositor_CreateDriverDirectModeResolveTextures = 475,
    Compositor_OpenDriverDirectModeResolveTextures = 476,
    Compositor_CreateFallbackSyncTexture = 477,
    Compositor_ShareFallbackSyncTexture = 478,
    Compositor_CreateOverlayIndexBuffer = 479,
    Compositor_CreateOverlayVertexBuffer = 480,
    Compositor_CreateTextVertexBuffer = 481,
    Compositor_CreateTextIndexBuffer = 482,
    Compositor_CreateMirrorTextures = 483,
    Compositor_CreateLastFrameRenderTexture = 484,
    Compositor_CreateMirrorOverlay = 485,
    Compositor_FailedToCreateVirtualDisplayBackbuffer = 486,
    Compositor_DisplayModeNotSupported = 487,
    Compositor_CreateOverlayInvalidCall = 488,
    Compositor_CreateOverlayAlreadyInitialized = 489,
    Compositor_FailedToCreateMailbox = 490,
    Compositor_WindowInterfaceIsNull = 491,
    Compositor_SystemLayerCreateInstance = 492,
    Compositor_SystemLayerCreateSession = 493,
    Compositor_CreateInverseDistortUVs = 494,
    Compositor_CreateBackbufferDepth = 495,
    Compositor_CannotDRMLeaseDisplay = 496,
    Compositor_CannotConnectToDisplayServer = 497,
    Compositor_GnomeNoDRMLeasing = 498,
    Compositor_FailedToInitializeEncoder = 499,
    Compositor_CreateBlurTexture = 500,
    VendorSpecific_UnableToConnectToOculusRuntime = 1000,
    VendorSpecific_WindowsNotInDevMode = 1001,
    VendorSpecific_OculusLinkNotEnabled = 1002,
    VendorSpecific_HmdFound_CantOpenDevice = 1101,
    VendorSpecific_HmdFound_UnableToRequestConfigStart = 1102,
    VendorSpecific_HmdFound_NoStoredConfig = 1103,
    VendorSpecific_HmdFound_ConfigTooBig = 1104,
    VendorSpecific_HmdFound_ConfigTooSmall = 1105,
    VendorSpecific_HmdFound_UnableToInitZLib = 1106,
    VendorSpecific_HmdFound_CantReadFirmwareVersion = 1107,
    VendorSpecific_HmdFound_UnableToSendUserDataStart = 1108,
    VendorSpecific_HmdFound_UnableToGetUserDataStart = 1109,
    VendorSpecific_HmdFound_UnableToGetUserDataNext = 1110,
    VendorSpecific_HmdFound_UserDataAddressRange = 1111,
    VendorSpecific_HmdFound_UserDataError = 1112,
    VendorSpecific_HmdFound_ConfigFailedSanityCheck = 1113,
    VendorSpecific_OculusRuntimeBadInstall = 1114,
    VendorSpecific_HmdFound_UnexpectedConfiguration_1 = 1115,
    Steam_SteamInstallationNotFound = 2000,
    LastError = 2001,

    fn maybe(init_error: EVRInitError) InitError!void {
        return switch (init_error) {
            .None => {},
            .Unknown => InitError.Unknown,
            .Init_InstallationNotFound => InitError.Init_InstallationNotFound,
            .Init_InstallationCorrupt => InitError.Init_InstallationCorrupt,
            .Init_VRClientDLLNotFound => InitError.Init_VRClientDLLNotFound,
            .Init_FileNotFound => InitError.Init_FileNotFound,
            .Init_FactoryNotFound => InitError.Init_FactoryNotFound,
            .Init_InterfaceNotFound => InitError.Init_InterfaceNotFound,
            .Init_InvalidInterface => InitError.Init_InvalidInterface,
            .Init_UserConfigDirectoryInvalid => InitError.Init_UserConfigDirectoryInvalid,
            .Init_HmdNotFound => InitError.Init_HmdNotFound,
            .Init_NotInitialized => InitError.Init_NotInitialized,
            .Init_PathRegistryNotFound => InitError.Init_PathRegistryNotFound,
            .Init_NoConfigPath => InitError.Init_NoConfigPath,
            .Init_NoLogPath => InitError.Init_NoLogPath,
            .Init_PathRegistryNotWritable => InitError.Init_PathRegistryNotWritable,
            .Init_AppInfoInitFailed => InitError.Init_AppInfoInitFailed,
            .Init_Retry => InitError.Init_Retry,
            .Init_InitCanceledByUser => InitError.Init_InitCanceledByUser,
            .Init_AnotherAppLaunching => InitError.Init_AnotherAppLaunching,
            .Init_SettingsInitFailed => InitError.Init_SettingsInitFailed,
            .Init_ShuttingDown => InitError.Init_ShuttingDown,
            .Init_TooManyObjects => InitError.Init_TooManyObjects,
            .Init_NoServerForBackgroundApp => InitError.Init_NoServerForBackgroundApp,
            .Init_NotSupportedWithCompositor => InitError.Init_NotSupportedWithCompositor,
            .Init_NotAvailableToUtilityApps => InitError.Init_NotAvailableToUtilityApps,
            .Init_Internal => InitError.Init_Internal,
            .Init_HmdDriverIdIsNone => InitError.Init_HmdDriverIdIsNone,
            .Init_HmdNotFoundPresenceFailed => InitError.Init_HmdNotFoundPresenceFailed,
            .Init_VRMonitorNotFound => InitError.Init_VRMonitorNotFound,
            .Init_VRMonitorStartupFailed => InitError.Init_VRMonitorStartupFailed,
            .Init_LowPowerWatchdogNotSupported => InitError.Init_LowPowerWatchdogNotSupported,
            .Init_InvalidApplicationType => InitError.Init_InvalidApplicationType,
            .Init_NotAvailableToWatchdogApps => InitError.Init_NotAvailableToWatchdogApps,
            .Init_WatchdogDisabledInSettings => InitError.Init_WatchdogDisabledInSettings,
            .Init_VRDashboardNotFound => InitError.Init_VRDashboardNotFound,
            .Init_VRDashboardStartupFailed => InitError.Init_VRDashboardStartupFailed,
            .Init_VRHomeNotFound => InitError.Init_VRHomeNotFound,
            .Init_VRHomeStartupFailed => InitError.Init_VRHomeStartupFailed,
            .Init_RebootingBusy => InitError.Init_RebootingBusy,
            .Init_FirmwareUpdateBusy => InitError.Init_FirmwareUpdateBusy,
            .Init_FirmwareRecoveryBusy => InitError.Init_FirmwareRecoveryBusy,
            .Init_USBServiceBusy => InitError.Init_USBServiceBusy,
            .Init_VRWebHelperStartupFailed => InitError.Init_VRWebHelperStartupFailed,
            .Init_TrackerManagerInitFailed => InitError.Init_TrackerManagerInitFailed,
            .Init_AlreadyRunning => InitError.Init_AlreadyRunning,
            .Init_FailedForVrMonitor => InitError.Init_FailedForVrMonitor,
            .Init_PropertyManagerInitFailed => InitError.Init_PropertyManagerInitFailed,
            .Init_WebServerFailed => InitError.Init_WebServerFailed,
            .Init_IllegalTypeTransition => InitError.Init_IllegalTypeTransition,
            .Init_MismatchedRuntimes => InitError.Init_MismatchedRuntimes,
            .Init_InvalidProcessId => InitError.Init_InvalidProcessId,
            .Init_VRServiceStartupFailed => InitError.Init_VRServiceStartupFailed,
            .Init_PrismNeedsNewDrivers => InitError.Init_PrismNeedsNewDrivers,
            .Init_PrismStartupTimedOut => InitError.Init_PrismStartupTimedOut,
            .Init_CouldNotStartPrism => InitError.Init_CouldNotStartPrism,
            .Init_PrismClientInitFailed => InitError.Init_PrismClientInitFailed,
            .Init_PrismClientStartFailed => InitError.Init_PrismClientStartFailed,
            .Init_PrismExitedUnexpectedly => InitError.Init_PrismExitedUnexpectedly,
            .Init_BadLuid => InitError.Init_BadLuid,
            .Init_NoServerForAppContainer => InitError.Init_NoServerForAppContainer,
            .Init_DuplicateBootstrapper => InitError.Init_DuplicateBootstrapper,
            .Init_VRDashboardServicePending => InitError.Init_VRDashboardServicePending,
            .Init_VRDashboardServiceTimeout => InitError.Init_VRDashboardServiceTimeout,
            .Init_VRDashboardServiceStopped => InitError.Init_VRDashboardServiceStopped,
            .Init_VRDashboardAlreadyStarted => InitError.Init_VRDashboardAlreadyStarted,
            .Init_VRDashboardCopyFailed => InitError.Init_VRDashboardCopyFailed,
            .Init_VRDashboardTokenFailure => InitError.Init_VRDashboardTokenFailure,
            .Init_VRDashboardEnvironmentFailure => InitError.Init_VRDashboardEnvironmentFailure,
            .Init_VRDashboardPathFailure => InitError.Init_VRDashboardPathFailure,
            .Driver_Failed => InitError.Driver_Failed,
            .Driver_Unknown => InitError.Driver_Unknown,
            .Driver_HmdUnknown => InitError.Driver_HmdUnknown,
            .Driver_NotLoaded => InitError.Driver_NotLoaded,
            .Driver_RuntimeOutOfDate => InitError.Driver_RuntimeOutOfDate,
            .Driver_HmdInUse => InitError.Driver_HmdInUse,
            .Driver_NotCalibrated => InitError.Driver_NotCalibrated,
            .Driver_CalibrationInvalid => InitError.Driver_CalibrationInvalid,
            .Driver_HmdDisplayNotFound => InitError.Driver_HmdDisplayNotFound,
            .Driver_TrackedDeviceInterfaceUnknown => InitError.Driver_TrackedDeviceInterfaceUnknown,
            .Driver_HmdDriverIdOutOfBounds => InitError.Driver_HmdDriverIdOutOfBounds,
            .Driver_HmdDisplayMirrored => InitError.Driver_HmdDisplayMirrored,
            .Driver_HmdDisplayNotFoundLaptop => InitError.Driver_HmdDisplayNotFoundLaptop,
            .Driver_PeerDriverNotInstalled => InitError.Driver_PeerDriverNotInstalled,
            .Driver_WirelessHmdNotConnected => InitError.Driver_WirelessHmdNotConnected,
            .IPC_ServerInitFailed => InitError.IPC_ServerInitFailed,
            .IPC_ConnectFailed => InitError.IPC_ConnectFailed,
            .IPC_SharedStateInitFailed => InitError.IPC_SharedStateInitFailed,
            .IPC_CompositorInitFailed => InitError.IPC_CompositorInitFailed,
            .IPC_MutexInitFailed => InitError.IPC_MutexInitFailed,
            .IPC_Failed => InitError.IPC_Failed,
            .IPC_CompositorConnectFailed => InitError.IPC_CompositorConnectFailed,
            .IPC_CompositorInvalidConnectResponse => InitError.IPC_CompositorInvalidConnectResponse,
            .IPC_ConnectFailedAfterMultipleAttempts => InitError.IPC_ConnectFailedAfterMultipleAttempts,
            .IPC_ConnectFailedAfterTargetExited => InitError.IPC_ConnectFailedAfterTargetExited,
            .IPC_NamespaceUnavailable => InitError.IPC_NamespaceUnavailable,
            .Compositor_Failed => InitError.Compositor_Failed,
            .Compositor_D3D11HardwareRequired => InitError.Compositor_D3D11HardwareRequired,
            .Compositor_FirmwareRequiresUpdate => InitError.Compositor_FirmwareRequiresUpdate,
            .Compositor_OverlayInitFailed => InitError.Compositor_OverlayInitFailed,
            .Compositor_ScreenshotsInitFailed => InitError.Compositor_ScreenshotsInitFailed,
            .Compositor_UnableToCreateDevice => InitError.Compositor_UnableToCreateDevice,
            .Compositor_SharedStateIsNull => InitError.Compositor_SharedStateIsNull,
            .Compositor_NotificationManagerIsNull => InitError.Compositor_NotificationManagerIsNull,
            .Compositor_ResourceManagerClientIsNull => InitError.Compositor_ResourceManagerClientIsNull,
            .Compositor_MessageOverlaySharedStateInitFailure => InitError.Compositor_MessageOverlaySharedStateInitFailure,
            .Compositor_PropertiesInterfaceIsNull => InitError.Compositor_PropertiesInterfaceIsNull,
            .Compositor_CreateFullscreenWindowFailed => InitError.Compositor_CreateFullscreenWindowFailed,
            .Compositor_SettingsInterfaceIsNull => InitError.Compositor_SettingsInterfaceIsNull,
            .Compositor_FailedToShowWindow => InitError.Compositor_FailedToShowWindow,
            .Compositor_DistortInterfaceIsNull => InitError.Compositor_DistortInterfaceIsNull,
            .Compositor_DisplayFrequencyFailure => InitError.Compositor_DisplayFrequencyFailure,
            .Compositor_RendererInitializationFailed => InitError.Compositor_RendererInitializationFailed,
            .Compositor_DXGIFactoryInterfaceIsNull => InitError.Compositor_DXGIFactoryInterfaceIsNull,
            .Compositor_DXGIFactoryCreateFailed => InitError.Compositor_DXGIFactoryCreateFailed,
            .Compositor_DXGIFactoryQueryFailed => InitError.Compositor_DXGIFactoryQueryFailed,
            .Compositor_InvalidAdapterDesktop => InitError.Compositor_InvalidAdapterDesktop,
            .Compositor_InvalidHmdAttachment => InitError.Compositor_InvalidHmdAttachment,
            .Compositor_InvalidOutputDesktop => InitError.Compositor_InvalidOutputDesktop,
            .Compositor_InvalidDeviceProvided => InitError.Compositor_InvalidDeviceProvided,
            .Compositor_D3D11RendererInitializationFailed => InitError.Compositor_D3D11RendererInitializationFailed,
            .Compositor_FailedToFindDisplayMode => InitError.Compositor_FailedToFindDisplayMode,
            .Compositor_FailedToCreateSwapChain => InitError.Compositor_FailedToCreateSwapChain,
            .Compositor_FailedToGetBackBuffer => InitError.Compositor_FailedToGetBackBuffer,
            .Compositor_FailedToCreateRenderTarget => InitError.Compositor_FailedToCreateRenderTarget,
            .Compositor_FailedToCreateDXGI2SwapChain => InitError.Compositor_FailedToCreateDXGI2SwapChain,
            .Compositor_FailedtoGetDXGI2BackBuffer => InitError.Compositor_FailedtoGetDXGI2BackBuffer,
            .Compositor_FailedToCreateDXGI2RenderTarget => InitError.Compositor_FailedToCreateDXGI2RenderTarget,
            .Compositor_FailedToGetDXGIDeviceInterface => InitError.Compositor_FailedToGetDXGIDeviceInterface,
            .Compositor_SelectDisplayMode => InitError.Compositor_SelectDisplayMode,
            .Compositor_FailedToCreateNvAPIRenderTargets => InitError.Compositor_FailedToCreateNvAPIRenderTargets,
            .Compositor_NvAPISetDisplayMode => InitError.Compositor_NvAPISetDisplayMode,
            .Compositor_FailedToCreateDirectModeDisplay => InitError.Compositor_FailedToCreateDirectModeDisplay,
            .Compositor_InvalidHmdPropertyContainer => InitError.Compositor_InvalidHmdPropertyContainer,
            .Compositor_UpdateDisplayFrequency => InitError.Compositor_UpdateDisplayFrequency,
            .Compositor_CreateRasterizerState => InitError.Compositor_CreateRasterizerState,
            .Compositor_CreateWireframeRasterizerState => InitError.Compositor_CreateWireframeRasterizerState,
            .Compositor_CreateSamplerState => InitError.Compositor_CreateSamplerState,
            .Compositor_CreateClampToBorderSamplerState => InitError.Compositor_CreateClampToBorderSamplerState,
            .Compositor_CreateAnisoSamplerState => InitError.Compositor_CreateAnisoSamplerState,
            .Compositor_CreateOverlaySamplerState => InitError.Compositor_CreateOverlaySamplerState,
            .Compositor_CreatePanoramaSamplerState => InitError.Compositor_CreatePanoramaSamplerState,
            .Compositor_CreateFontSamplerState => InitError.Compositor_CreateFontSamplerState,
            .Compositor_CreateNoBlendState => InitError.Compositor_CreateNoBlendState,
            .Compositor_CreateBlendState => InitError.Compositor_CreateBlendState,
            .Compositor_CreateAlphaBlendState => InitError.Compositor_CreateAlphaBlendState,
            .Compositor_CreateBlendStateMaskR => InitError.Compositor_CreateBlendStateMaskR,
            .Compositor_CreateBlendStateMaskG => InitError.Compositor_CreateBlendStateMaskG,
            .Compositor_CreateBlendStateMaskB => InitError.Compositor_CreateBlendStateMaskB,
            .Compositor_CreateDepthStencilState => InitError.Compositor_CreateDepthStencilState,
            .Compositor_CreateDepthStencilStateNoWrite => InitError.Compositor_CreateDepthStencilStateNoWrite,
            .Compositor_CreateDepthStencilStateNoDepth => InitError.Compositor_CreateDepthStencilStateNoDepth,
            .Compositor_CreateFlushTexture => InitError.Compositor_CreateFlushTexture,
            .Compositor_CreateDistortionSurfaces => InitError.Compositor_CreateDistortionSurfaces,
            .Compositor_CreateConstantBuffer => InitError.Compositor_CreateConstantBuffer,
            .Compositor_CreateHmdPoseConstantBuffer => InitError.Compositor_CreateHmdPoseConstantBuffer,
            .Compositor_CreateHmdPoseStagingConstantBuffer => InitError.Compositor_CreateHmdPoseStagingConstantBuffer,
            .Compositor_CreateSharedFrameInfoConstantBuffer => InitError.Compositor_CreateSharedFrameInfoConstantBuffer,
            .Compositor_CreateOverlayConstantBuffer => InitError.Compositor_CreateOverlayConstantBuffer,
            .Compositor_CreateSceneTextureIndexConstantBuffer => InitError.Compositor_CreateSceneTextureIndexConstantBuffer,
            .Compositor_CreateReadableSceneTextureIndexConstantBuffer => InitError.Compositor_CreateReadableSceneTextureIndexConstantBuffer,
            .Compositor_CreateLayerGraphicsTextureIndexConstantBuffer => InitError.Compositor_CreateLayerGraphicsTextureIndexConstantBuffer,
            .Compositor_CreateLayerComputeTextureIndexConstantBuffer => InitError.Compositor_CreateLayerComputeTextureIndexConstantBuffer,
            .Compositor_CreateLayerComputeSceneTextureIndexConstantBuffer => InitError.Compositor_CreateLayerComputeSceneTextureIndexConstantBuffer,
            .Compositor_CreateComputeHmdPoseConstantBuffer => InitError.Compositor_CreateComputeHmdPoseConstantBuffer,
            .Compositor_CreateGeomConstantBuffer => InitError.Compositor_CreateGeomConstantBuffer,
            .Compositor_CreatePanelMaskConstantBuffer => InitError.Compositor_CreatePanelMaskConstantBuffer,
            .Compositor_CreatePixelSimUBO => InitError.Compositor_CreatePixelSimUBO,
            .Compositor_CreateMSAARenderTextures => InitError.Compositor_CreateMSAARenderTextures,
            .Compositor_CreateResolveRenderTextures => InitError.Compositor_CreateResolveRenderTextures,
            .Compositor_CreateComputeResolveRenderTextures => InitError.Compositor_CreateComputeResolveRenderTextures,
            .Compositor_CreateDriverDirectModeResolveTextures => InitError.Compositor_CreateDriverDirectModeResolveTextures,
            .Compositor_OpenDriverDirectModeResolveTextures => InitError.Compositor_OpenDriverDirectModeResolveTextures,
            .Compositor_CreateFallbackSyncTexture => InitError.Compositor_CreateFallbackSyncTexture,
            .Compositor_ShareFallbackSyncTexture => InitError.Compositor_ShareFallbackSyncTexture,
            .Compositor_CreateOverlayIndexBuffer => InitError.Compositor_CreateOverlayIndexBuffer,
            .Compositor_CreateOverlayVertexBuffer => InitError.Compositor_CreateOverlayVertexBuffer,
            .Compositor_CreateTextVertexBuffer => InitError.Compositor_CreateTextVertexBuffer,
            .Compositor_CreateTextIndexBuffer => InitError.Compositor_CreateTextIndexBuffer,
            .Compositor_CreateMirrorTextures => InitError.Compositor_CreateMirrorTextures,
            .Compositor_CreateLastFrameRenderTexture => InitError.Compositor_CreateLastFrameRenderTexture,
            .Compositor_CreateMirrorOverlay => InitError.Compositor_CreateMirrorOverlay,
            .Compositor_FailedToCreateVirtualDisplayBackbuffer => InitError.Compositor_FailedToCreateVirtualDisplayBackbuffer,
            .Compositor_DisplayModeNotSupported => InitError.Compositor_DisplayModeNotSupported,
            .Compositor_CreateOverlayInvalidCall => InitError.Compositor_CreateOverlayInvalidCall,
            .Compositor_CreateOverlayAlreadyInitialized => InitError.Compositor_CreateOverlayAlreadyInitialized,
            .Compositor_FailedToCreateMailbox => InitError.Compositor_FailedToCreateMailbox,
            .Compositor_WindowInterfaceIsNull => InitError.Compositor_WindowInterfaceIsNull,
            .Compositor_SystemLayerCreateInstance => InitError.Compositor_SystemLayerCreateInstance,
            .Compositor_SystemLayerCreateSession => InitError.Compositor_SystemLayerCreateSession,
            .Compositor_CreateInverseDistortUVs => InitError.Compositor_CreateInverseDistortUVs,
            .Compositor_CreateBackbufferDepth => InitError.Compositor_CreateBackbufferDepth,
            .Compositor_CannotDRMLeaseDisplay => InitError.Compositor_CannotDRMLeaseDisplay,
            .Compositor_CannotConnectToDisplayServer => InitError.Compositor_CannotConnectToDisplayServer,
            .Compositor_GnomeNoDRMLeasing => InitError.Compositor_GnomeNoDRMLeasing,
            .Compositor_FailedToInitializeEncoder => InitError.Compositor_FailedToInitializeEncoder,
            .Compositor_CreateBlurTexture => InitError.Compositor_CreateBlurTexture,
            .VendorSpecific_UnableToConnectToOculusRuntime => InitError.VendorSpecific_UnableToConnectToOculusRuntime,
            .VendorSpecific_WindowsNotInDevMode => InitError.VendorSpecific_WindowsNotInDevMode,
            .VendorSpecific_OculusLinkNotEnabled => InitError.VendorSpecific_OculusLinkNotEnabled,
            .VendorSpecific_HmdFound_CantOpenDevice => InitError.VendorSpecific_HmdFound_CantOpenDevice,
            .VendorSpecific_HmdFound_UnableToRequestConfigStart => InitError.VendorSpecific_HmdFound_UnableToRequestConfigStart,
            .VendorSpecific_HmdFound_NoStoredConfig => InitError.VendorSpecific_HmdFound_NoStoredConfig,
            .VendorSpecific_HmdFound_ConfigTooBig => InitError.VendorSpecific_HmdFound_ConfigTooBig,
            .VendorSpecific_HmdFound_ConfigTooSmall => InitError.VendorSpecific_HmdFound_ConfigTooSmall,
            .VendorSpecific_HmdFound_UnableToInitZLib => InitError.VendorSpecific_HmdFound_UnableToInitZLib,
            .VendorSpecific_HmdFound_CantReadFirmwareVersion => InitError.VendorSpecific_HmdFound_CantReadFirmwareVersion,
            .VendorSpecific_HmdFound_UnableToSendUserDataStart => InitError.VendorSpecific_HmdFound_UnableToSendUserDataStart,
            .VendorSpecific_HmdFound_UnableToGetUserDataStart => InitError.VendorSpecific_HmdFound_UnableToGetUserDataStart,
            .VendorSpecific_HmdFound_UnableToGetUserDataNext => InitError.VendorSpecific_HmdFound_UnableToGetUserDataNext,
            .VendorSpecific_HmdFound_UserDataAddressRange => InitError.VendorSpecific_HmdFound_UserDataAddressRange,
            .VendorSpecific_HmdFound_UserDataError => InitError.VendorSpecific_HmdFound_UserDataError,
            .VendorSpecific_HmdFound_ConfigFailedSanityCheck => InitError.VendorSpecific_HmdFound_ConfigFailedSanityCheck,
            .VendorSpecific_OculusRuntimeBadInstall => InitError.VendorSpecific_OculusRuntimeBadInstall,
            .VendorSpecific_HmdFound_UnexpectedConfiguration_1 => InitError.VendorSpecific_HmdFound_UnexpectedConfiguration_1,
            .Steam_SteamInstallationNotFound => InitError.Steam_SteamInstallationNotFound,
            .LastError => InitError.LastError,
        };
    }

    pub fn asSymbol(init_error: EVRInitError) [:0]const u8 {
        return std.mem.span(VR_GetVRInitErrorAsSymbol(init_error));
    }
    pub fn asEnglishDescription(init_error: EVRInitError) [:0]const u8 {
        return std.mem.span(VR_GetVRInitErrorAsEnglishDescription(init_error));
    }
};

pub const ApplicationType = EVRApplicationType;
const EVRApplicationType = enum(i32) {
    other = 0,
    scene = 1,
    overlay = 2,
    background = 3,
    utility = 4,
    vr_monitor = 5,
    steam_watchdog = 6,
    bootstrapper = 7,
    web_helper = 8,
    open_xr_instance = 9,
    open_xr_scene = 10,
    open_xr_overlay = 11,
    prism = 12,
    room_view = 13,
    max = 14,
};
extern fn VR_InitInternal(*EVRInitError, EVRApplicationType) callconv(.C) *isize;
extern fn VR_GetGenericInterface([*c]const u8, *EVRInitError) callconv(.C) *isize;
pub const shutdown = VR_ShutdownInternal;
extern fn VR_ShutdownInternal() callconv(.C) void;

const std = @import("std");

extern fn VR_GetVRInitErrorAsSymbol(EVRInitError) callconv(.C) [*c]u8;
extern fn VR_GetVRInitErrorAsEnglishDescription(EVRInitError) callconv(.C) [*c]u8;

test "init error have english descriptions" {
    try std.testing.expectEqualStrings("No Error (0)", EVRInitError.None.asEnglishDescription());
}

test "init/shutdown utility" {
    _ = try init(.utility);
    defer shutdown();
}

pub const isHmdPresent = VR_IsHmdPresent;
extern fn VR_IsHmdPresent() callconv(.C) bool;

pub const isRuntimeInstalled = VR_IsRuntimeInstalled;
extern fn VR_IsRuntimeInstalled() callconv(.C) bool;
